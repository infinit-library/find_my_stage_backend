generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(cuid())
  email                 String           @unique
  password              String?
  firstName             String
  lastName              String
  fullName              String?
  profilePicture        String?
  googleId              String?          @unique
  isGoogleUser          Boolean          @default(false)
  isEmailVerified       Boolean          @default(false)
  isActive              Boolean          @default(true)
  emailVerifiedAt       DateTime?
  subscriptionStatus    String           @default("FREE")
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  emailNotifications    Boolean          @default(true)
  pushNotifications     Boolean          @default(true)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  lastLoginAt           DateTime?
  status                String           @default("active")
  events                Event[]
  paymentHistory        PaymentHistory[]
  userTopics            UserTopic[]

  @@map("users")
}

model Event {
  id                  String    @id @default(cuid())
  title               String
  description         String?
  date                DateTime
  location            String?
  status              String    @default("UPCOMING")
  imageUrl            String?
  eventUrl            String?
  source              String?
  sourceId            Int?     // Unique integer ID for each site (1=PaperCall.io, 2=Eventbrite, etc.)
  organizer           String?  // Event organizer name
  state               String?
  scrapedAt           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  topicId             String?
  userId              String?
  topic               Topic?   @relation(fields: [topicId], references: [id])
  user                User?    @relation(fields: [userId], references: [id])

  @@map("events")
}

model Topic {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  color       String?
  icon        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  events      Event[]
  userTopics  UserTopic[]

  @@map("topics")
}

model UserTopic {
  id       String @id @default(cuid())
  userId   String
  topicId  String
  priority Int    @default(1)
  topic    Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("user_topics")
}

model PaymentHistory {
  id                    String   @id @default(cuid())
  paidDate              DateTime @default(now())
  type                  String
  amount                Int
  status                String
  currency              String   @default("USD")
  stripePaymentIntentId String?
  stripeCustomerId      String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_history")
}
